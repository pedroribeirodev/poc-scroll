import { Product } from "@/types/products";
import { Inter } from "next/font/google";
import Head from "next/head";
import Link from "next/link";
import { useCallback, useEffect, useState } from "react";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  const [products, setProducts] = useState<Product[]>([]);
  const [loading, setLoading] = useState(false);
  const [hasMore, setHasMore] = useState(true);
  const [start, setStart] = useState(0);

  const loadMore = useCallback(async () => {
    if (loading || !hasMore) return;

    setLoading(true);
    try {
      const response = await fetch(`/api/products?start=${start}&limit=10`);
      const data: Product[] = await response.json();
      console.log(data);
      setProducts((prev) => [...prev, ...data]);
      setStart((prev) => prev + 10);

      if (data.length < 10) {
        setHasMore(false);
      }
    } catch (error) {
      console.error("Error fetching products:", error);
    } finally {
      setLoading(false);
    }
  }, [loading, hasMore, start]);

  useEffect(() => {
    const lastProductLoaded = sessionStorage.getItem("lastProductLoaded");
    const savedScrollPosition = sessionStorage.getItem("scrollPosition");

    if (lastProductLoaded) {
      const fetchInitialProducts = async () => {
        const total = parseInt(lastProductLoaded) + 10; // Adicionamos 10 para incluir os produtos que jÃ¡ foram buscados anteriormente
        const response = await fetch(`/api/products?start=0&total=${total}`);
        const data: Product[] = await response.json();
        setProducts(data);

        if (savedScrollPosition) {
          window.scrollTo(0, parseInt(savedScrollPosition));
          sessionStorage.removeItem("scrollPosition");
        }

        setStart(total);
        sessionStorage.removeItem("lastProductLoaded");
      };

      fetchInitialProducts();
    } else {
      loadMore();
    }
  }, []);

  useEffect(() => {
    const handleScroll = () => {
      if (
        window.innerHeight + window.scrollY >=
        document.documentElement.scrollHeight - 700
      ) {
        loadMore();
      }
    };

    window.addEventListener("scroll", handleScroll);

    return () => window.removeEventListener("scroll", handleScroll);
  }, [loadMore]);

  const handleProductClick = () => {
    sessionStorage.setItem("scrollPosition", window.scrollY.toString());
    sessionStorage.setItem("lastProductLoaded", start.toString());
  };

  return (
    <>
      <Head>
        <title>POC Scroll</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <ul>
        {products.map((product) => (
          <div className="card-products" key={product.id}>
            <li>
              {product.name} - {product.description} - ${product.price}
            </li>
            <Link href={`/product/${product.slug}`} legacyBehavior>
              <a onClick={handleProductClick}>Ir para o produto</a>
            </Link>
          </div>
        ))}
      </ul>
      {loading && <p>Loading...</p>}
    </>
  );
}
